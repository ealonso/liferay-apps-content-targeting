/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.content.targeting.model.impl;

import com.liferay.content.targeting.model.ReportInstance;
import com.liferay.content.targeting.model.ReportInstanceModel;
import com.liferay.content.targeting.model.ReportInstanceSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ReportInstance service. Represents a row in the &quot;CT_ReportInstance&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.content.targeting.model.ReportInstanceModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ReportInstanceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ReportInstanceImpl
 * @see com.liferay.content.targeting.model.ReportInstance
 * @see com.liferay.content.targeting.model.ReportInstanceModel
 * @generated
 */
@JSON(strict = true)
public class ReportInstanceModelImpl extends BaseModelImpl<ReportInstance>
	implements ReportInstanceModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a report instance model instance should use the {@link com.liferay.content.targeting.model.ReportInstance} interface instead.
	 */
	public static final String TABLE_NAME = "CT_ReportInstance";
	public static final Object[][] TABLE_COLUMNS = {
			{ "reportInstanceId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "reportKey", Types.VARCHAR },
			{ "className", Types.VARCHAR },
			{ "classPK", Types.BIGINT },
			{ "typeSettings", Types.CLOB }
		};
	public static final String TABLE_SQL_CREATE = "create table CT_ReportInstance (reportInstanceId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,modifiedDate DATE null,reportKey VARCHAR(75) null,className VARCHAR(75) null,classPK LONG,typeSettings TEXT null)";
	public static final String TABLE_SQL_DROP = "drop table CT_ReportInstance";
	public static final String ORDER_BY_JPQL = " ORDER BY reportInstance.reportKey DESC";
	public static final String ORDER_BY_SQL = " ORDER BY CT_ReportInstance.reportKey DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.content.targeting.model.ReportInstance"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.content.targeting.model.ReportInstance"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.content.targeting.model.ReportInstance"),
			true);
	public static long CLASSNAME_COLUMN_BITMASK = 1L;
	public static long CLASSPK_COLUMN_BITMASK = 2L;
	public static long REPORTKEY_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ReportInstance toModel(ReportInstanceSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ReportInstance model = new ReportInstanceImpl();

		model.setReportInstanceId(soapModel.getReportInstanceId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setReportKey(soapModel.getReportKey());
		model.setClassName(soapModel.getClassName());
		model.setClassPK(soapModel.getClassPK());
		model.setTypeSettings(soapModel.getTypeSettings());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ReportInstance> toModels(ReportInstanceSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ReportInstance> models = new ArrayList<ReportInstance>(soapModels.length);

		for (ReportInstanceSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.content.targeting.model.ReportInstance"));

	public ReportInstanceModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _reportInstanceId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setReportInstanceId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _reportInstanceId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ReportInstance.class;
	}

	@Override
	public String getModelClassName() {
		return ReportInstance.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("reportInstanceId", getReportInstanceId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("reportKey", getReportKey());
		attributes.put("className", getClassName());
		attributes.put("classPK", getClassPK());
		attributes.put("typeSettings", getTypeSettings());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long reportInstanceId = (Long)attributes.get("reportInstanceId");

		if (reportInstanceId != null) {
			setReportInstanceId(reportInstanceId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String reportKey = (String)attributes.get("reportKey");

		if (reportKey != null) {
			setReportKey(reportKey);
		}

		String className = (String)attributes.get("className");

		if (className != null) {
			setClassName(className);
		}

		Long classPK = (Long)attributes.get("classPK");

		if (classPK != null) {
			setClassPK(classPK);
		}

		String typeSettings = (String)attributes.get("typeSettings");

		if (typeSettings != null) {
			setTypeSettings(typeSettings);
		}
	}

	@JSON
	@Override
	public long getReportInstanceId() {
		return _reportInstanceId;
	}

	@Override
	public void setReportInstanceId(long reportInstanceId) {
		_reportInstanceId = reportInstanceId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getReportKey() {
		if (_reportKey == null) {
			return StringPool.BLANK;
		}
		else {
			return _reportKey;
		}
	}

	@Override
	public void setReportKey(String reportKey) {
		_columnBitmask = -1L;

		if (_originalReportKey == null) {
			_originalReportKey = _reportKey;
		}

		_reportKey = reportKey;
	}

	public String getOriginalReportKey() {
		return GetterUtil.getString(_originalReportKey);
	}

	@JSON
	@Override
	public String getClassName() {
		if (_className == null) {
			return StringPool.BLANK;
		}
		else {
			return _className;
		}
	}

	@Override
	public void setClassName(String className) {
		_columnBitmask |= CLASSNAME_COLUMN_BITMASK;

		if (_originalClassName == null) {
			_originalClassName = _className;
		}

		_className = className;
	}

	public String getOriginalClassName() {
		return GetterUtil.getString(_originalClassName);
	}

	@JSON
	@Override
	public long getClassPK() {
		return _classPK;
	}

	@Override
	public void setClassPK(long classPK) {
		_columnBitmask |= CLASSPK_COLUMN_BITMASK;

		if (!_setOriginalClassPK) {
			_setOriginalClassPK = true;

			_originalClassPK = _classPK;
		}

		_classPK = classPK;
	}

	public long getOriginalClassPK() {
		return _originalClassPK;
	}

	@JSON
	@Override
	public String getTypeSettings() {
		if (_typeSettings == null) {
			return StringPool.BLANK;
		}
		else {
			return _typeSettings;
		}
	}

	@Override
	public void setTypeSettings(String typeSettings) {
		_typeSettings = typeSettings;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			ReportInstance.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ReportInstance toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ReportInstance)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ReportInstanceImpl reportInstanceImpl = new ReportInstanceImpl();

		reportInstanceImpl.setReportInstanceId(getReportInstanceId());
		reportInstanceImpl.setGroupId(getGroupId());
		reportInstanceImpl.setCompanyId(getCompanyId());
		reportInstanceImpl.setUserId(getUserId());
		reportInstanceImpl.setUserName(getUserName());
		reportInstanceImpl.setModifiedDate(getModifiedDate());
		reportInstanceImpl.setReportKey(getReportKey());
		reportInstanceImpl.setClassName(getClassName());
		reportInstanceImpl.setClassPK(getClassPK());
		reportInstanceImpl.setTypeSettings(getTypeSettings());

		reportInstanceImpl.resetOriginalValues();

		return reportInstanceImpl;
	}

	@Override
	public int compareTo(ReportInstance reportInstance) {
		int value = 0;

		value = getReportKey().compareTo(reportInstance.getReportKey());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ReportInstance)) {
			return false;
		}

		ReportInstance reportInstance = (ReportInstance)obj;

		long primaryKey = reportInstance.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ReportInstanceModelImpl reportInstanceModelImpl = this;

		reportInstanceModelImpl._originalReportKey = reportInstanceModelImpl._reportKey;

		reportInstanceModelImpl._originalClassName = reportInstanceModelImpl._className;

		reportInstanceModelImpl._originalClassPK = reportInstanceModelImpl._classPK;

		reportInstanceModelImpl._setOriginalClassPK = false;

		reportInstanceModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ReportInstance> toCacheModel() {
		ReportInstanceCacheModel reportInstanceCacheModel = new ReportInstanceCacheModel();

		reportInstanceCacheModel.reportInstanceId = getReportInstanceId();

		reportInstanceCacheModel.groupId = getGroupId();

		reportInstanceCacheModel.companyId = getCompanyId();

		reportInstanceCacheModel.userId = getUserId();

		reportInstanceCacheModel.userName = getUserName();

		String userName = reportInstanceCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			reportInstanceCacheModel.userName = null;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			reportInstanceCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			reportInstanceCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		reportInstanceCacheModel.reportKey = getReportKey();

		String reportKey = reportInstanceCacheModel.reportKey;

		if ((reportKey != null) && (reportKey.length() == 0)) {
			reportInstanceCacheModel.reportKey = null;
		}

		reportInstanceCacheModel.className = getClassName();

		String className = reportInstanceCacheModel.className;

		if ((className != null) && (className.length() == 0)) {
			reportInstanceCacheModel.className = null;
		}

		reportInstanceCacheModel.classPK = getClassPK();

		reportInstanceCacheModel.typeSettings = getTypeSettings();

		String typeSettings = reportInstanceCacheModel.typeSettings;

		if ((typeSettings != null) && (typeSettings.length() == 0)) {
			reportInstanceCacheModel.typeSettings = null;
		}

		return reportInstanceCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{reportInstanceId=");
		sb.append(getReportInstanceId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", reportKey=");
		sb.append(getReportKey());
		sb.append(", className=");
		sb.append(getClassName());
		sb.append(", classPK=");
		sb.append(getClassPK());
		sb.append(", typeSettings=");
		sb.append(getTypeSettings());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("com.liferay.content.targeting.model.ReportInstance");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>reportInstanceId</column-name><column-value><![CDATA[");
		sb.append(getReportInstanceId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reportKey</column-name><column-value><![CDATA[");
		sb.append(getReportKey());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>className</column-name><column-value><![CDATA[");
		sb.append(getClassName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classPK</column-name><column-value><![CDATA[");
		sb.append(getClassPK());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>typeSettings</column-name><column-value><![CDATA[");
		sb.append(getTypeSettings());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ReportInstance.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ReportInstance.class
		};
	private long _reportInstanceId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _modifiedDate;
	private String _reportKey;
	private String _originalReportKey;
	private String _className;
	private String _originalClassName;
	private long _classPK;
	private long _originalClassPK;
	private boolean _setOriginalClassPK;
	private String _typeSettings;
	private long _columnBitmask;
	private ReportInstance _escapedModel;
}